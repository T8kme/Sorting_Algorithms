// ---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "SortingAlgorithms.h"
#include "Table.h"

#include <vector>
#include <sstream>
#include <iostream>
#include <algorithm>    // std::sort

// ---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm2 *Form2;

inline std::string UnicodeToString(const UnicodeString& src) {
	std::vector<char>temp(src.Length() * 2); // double length for conversion
	std::wcstombs(&temp[0], src.c_str(), src.Length());
	return &temp[0];
}

// ---------------------------------------------------------------------------
__fastcall TForm2::TForm2(TComponent* Owner) : TForm(Owner) {
}

// ---------------------------------------------------------------------------
void __fastcall TForm2::Exit1Click(TObject *Sender) {
	Application->Terminate();
}

// ---------------------------------------------------------------------------
void __fastcall TForm2::btnStartClick(TObject *Sender) {

	try {
		clock_t begin; // time measuring
		clock_t end;

		std::string input = UnicodeToString(EditUnsorted->Text);

		std::vector<long>output;
		for (std::string::size_type p0 = 0, p1 = input.find(',');
		p1 != std::string::npos || p0 != std::string::npos;
		(p0 = (p1 == std::string::npos) ? p1 : ++p1), p1 = input.find(',', p0))
			output.push_back(strtol(input.c_str() + p0, NULL, 0));

		int size_of_array = output.size();
		int* array = new int[size_of_array];

		for (int i = 0; i < size_of_array; i++) {
			array[i] = output.at(i);
		}

		Table s_array(size_of_array, array);

		//

		if (RadioButton1->Checked) {
			begin = clock();
			s_array.Sort();
			end = clock();
		}
		else if (RadioButton2->Checked) {
			begin = clock();
			s_array.BubbleSort();
			end = clock();
		}
		else if (RadioButton3->Checked) {
			begin = clock();
			s_array.InsertionSort();
			end = clock();
		}
		else if (RadioButton4->Checked) {

		}
		else if (RadioButton5->Checked) {

		}
		else if (RadioButton6->Checked) {

		}
		else if (RadioButton7->Checked) {

		}
		else if (RadioButton8->Checked) {

		}
		else if (RadioButton9->Checked) {
                           			begin = clock();
			s_array.ShellSort();
			end = clock();
		}
		else if (RadioButton10->Checked) {

		}
		else if (RadioButton11->Checked) {

		}

		//

		double elapsed_secs = double(end - begin) / CLOCKS_PER_SEC;
		labelTime->Caption = FloatToStr(elapsed_secs);
		EditSorted->Text = s_array.TableToString();
	}

	catch (...) {
	}
}

// ---------------------------------------------------------------------------
void __fastcall TForm2::bSaveTimeClick(TObject *Sender) {
	String time = labelTime->Caption;
	int number = ListBoxTime->Items->Count + 1;
	ListBoxTime->Items->Add((String)number + ". " + time);

}

// ---------------------------------------------------------------------------
void __fastcall TForm2::bClearClick(TObject *Sender) {
	ListBoxTime->Items->Clear();
}
// ---------------------------------------------------------------------------

void __fastcall TForm2::bClearSortingClick(TObject *Sender) {
	EditSorted->Clear();
	EditUnsorted->Clear();
}

// ---------------------------------------------------------------------------
void __fastcall TForm2::About1Click(TObject *Sender) {
	AnsiString strMessage = "Sorting Algorithms";
	AnsiString strAuthor = "Author: Rafal Olszewski";
	AnsiString strVer = "Version: 1.0";
	AnsiString strWWW = "http://www.github.com/";

	ShowMessage(strMessage + sLineBreak + strAuthor + sLineBreak + strVer +
		sLineBreak + strWWW);
}
// ---------------------------------------------------------------------------

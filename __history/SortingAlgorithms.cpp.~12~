// ---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "SortingAlgorithms.h"
#include "Table.h"

#include <windows.h>
#include <iostream>
#include <vector>
#include <string>

// ---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm2 *Form2;
double PCFreq = 0.0;
__int64 CounterStart = 0;
double elapsed_secs;

void StartCounter() {
	LARGE_INTEGER li;
	if (!QueryPerformanceFrequency(&li))
		cout << "QueryPerformanceFrequency failed!\n";

	PCFreq = double(li.QuadPart) / 1000000.0;

	QueryPerformanceCounter(&li);
	CounterStart = li.QuadPart;
}

double GetCounter() {
	LARGE_INTEGER li;
	QueryPerformanceCounter(&li);
	return double(li.QuadPart - CounterStart) / PCFreq;
}

inline std::string UnicodeToString(const UnicodeString& src) {
	std::vector<char>temp(src.Length() * 2); // double length for conversion
	std::wcstombs(&temp[0], src.c_str(), src.Length());
	return &temp[0];
}

// ---------------------------------------------------------------------------
__fastcall TForm2::TForm2(TComponent* Owner) : TForm(Owner) {
}

// ---------------------------------------------------------------------------
void __fastcall TForm2::Exit1Click(TObject *Sender) {
	Application->Terminate();
}

// ---------------------------------------------------------------------------
void __fastcall TForm2::btnStartClick(TObject *Sender) {

	try {
		string input = UnicodeToString(EditUnsorted->Text);

		vector<long>output;
		for (string::size_type p0 = 0, p1 = input.find(',');
		p1 != string::npos || p0 != string::npos;
		(p0 = (p1 == string::npos) ? p1 : ++p1), p1 = input.find(',', p0))
			output.push_back(strtol(input.c_str() + p0, NULL, 0));

		int size_of_array = output.size();
		int* array = new int[size_of_array];

		for (int i = 0; i < size_of_array; i++) {
			array[i] = output.at(i);
		}

		Table s_array(size_of_array, array);
		//

		if (RadioButton1->Checked) {
			StartCounter();
			s_array.Sort();
			elapsed_secs = GetCounter();
		}
		else if (RadioButton2->Checked) {
			StartCounter();
			s_array.BubbleSort();
			elapsed_secs = GetCounter();
		}
		else if (RadioButton3->Checked) {
			StartCounter();
			s_array.InsertionSort();
			elapsed_secs = GetCounter();
		}
		else if (RadioButton4->Checked) {
			StartCounter();

			elapsed_secs = GetCounter();
		}
		else if (RadioButton5->Checked) {
			StartCounter();

			elapsed_secs = GetCounter();
		}
		else if (RadioButton6->Checked) {
			StartCounter();

			elapsed_secs = GetCounter();
		}
		else if (RadioButton7->Checked) {
			StartCounter();

			elapsed_secs = GetCounter();
		}
		else if (RadioButton8->Checked) {
			StartCounter();

			elapsed_secs = GetCounter();
		}
		else if (RadioButton9->Checked) {
			StartCounter();
			s_array.ShellSort();
			elapsed_secs = GetCounter();
		}
		else if (RadioButton10->Checked) {
			StartCounter();

			elapsed_secs = GetCounter();
		}
		else if (RadioButton11->Checked) {
			//s_array.ArrayToVector();
			StartCounter();
			s_array.HeapSort();
			elapsed_secs = GetCounter();
		}

		//
		labelTime->Caption = FloatToStrF(elapsed_secs, ffFixed, 2, 4) + " \u00B5s";
		EditSorted->Text = s_array.TableToString();
	}
	catch (...) {
	}
}

// ---------------------------------------------------------------------------
void __fastcall TForm2::bSaveTimeClick(TObject *Sender) {
	String time = FloatToStr(elapsed_secs);
	int number = ListBoxTime->Items->Count + 1;
	ListBoxTime->Items->Add((String)number + ". " + time + " \u00B5s");
}

// ---------------------------------------------------------------------------
void __fastcall TForm2::bClearClick(TObject *Sender) {
	ListBoxTime->Items->Clear();
}
// ---------------------------------------------------------------------------

void __fastcall TForm2::bClearSortingClick(TObject *Sender) {
	EditSorted->Clear();
	EditUnsorted->Clear();
}

// ---------------------------------------------------------------------------
void __fastcall TForm2::About1Click(TObject *Sender) {
	AnsiString strMessage = "Sorting Algorithms";
	AnsiString strAuthor = "Author: Rafal Olszewski";
	AnsiString strVer = "Version: 1.0";
	AnsiString strWWW = "http://www.github.com/";

	ShowMessage(strMessage + sLineBreak + strAuthor + sLineBreak + strVer +
		sLineBreak + strWWW);
}

// ---------------------------------------------------------------------------
void __fastcall TForm2::ListBoxTimeDblClick(TObject *Sender) {
	try {
		String SelectedItemCaption =
			ListBoxTime->Items->Strings[ListBoxTime->ItemIndex];
		string GetListItem = UnicodeToString(SelectedItemCaption);
		const char* str = new char[GetListItem.length() + 1];
		str = GetListItem.c_str();
		OpenClipboard(this->WindowHandle);
		EmptyClipboard();
		HGLOBAL h = GlobalAlloc(GHND | GMEM_SHARE, GetListItem.length() + 1);
		strcpy((LPSTR)GlobalLock(h), str);
		GlobalUnlock(h);
		SetClipboardData(CF_TEXT, h);
		CloseClipboard();

		ShowMessage("Copied " + SelectedItemCaption + " to clipboard");
	}
	catch (...) {

	}
}
// ---------------------------------------------------------------------------

// ---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "SortingAlgorithms.h"
#include "Table.h"

#include <windows.h>
#include <iostream>
#include <vector>
#include <string>
#include <fstream.h>
#include <memory>       //for STL auto_ptr class

// ---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm2 *Form2;
double PCFreq = 0.0;
__int64 CounterStart = 0;
double elapsed_secs;

void StartCounter() {
	LARGE_INTEGER li;

	PCFreq = double(li.QuadPart) / 1000000.0;
	QueryPerformanceCounter(&li);
	CounterStart = li.QuadPart;
}

double GetCounter() {
	LARGE_INTEGER li;
	QueryPerformanceCounter(&li);
	return double(li.QuadPart - CounterStart) / PCFreq;
}

inline std::string UnicodeToString(const UnicodeString& src) {
	std::vector<char>temp(src.Length() * 2); // double length for conversion
	std::wcstombs(&temp[0], src.c_str(), src.Length());
	return &temp[0];
}

// ---------------------------------------------------------------------------
__fastcall TForm2::TForm2(TComponent* Owner) : TForm(Owner) {
}

// ---------------------------------------------------------------------------
void __fastcall TForm2::Exit1Click(TObject *Sender) {
	Application->Terminate();
}

// ---------------------------------------------------------------------------
void __fastcall TForm2::bSaveTimeClick(TObject *Sender) {
	String time = FloatToStr(elapsed_secs);
	int number = ListBoxTime->Items->Count + 1;
	ListBoxTime->Items->Add((String)number + ". " + time + " \u00B5s");
}

// ---------------------------------------------------------------------------
void __fastcall TForm2::bClearClick(TObject *Sender) {
	ListBoxTime->Items->Clear();
}
// ---------------------------------------------------------------------------

void __fastcall TForm2::bClearSortingClick(TObject *Sender) {
	EditSorted->Clear();
	EditUnsorted->Clear();
	EditSorted->Enabled = false;
}

// ---------------------------------------------------------------------------
void __fastcall TForm2::About1Click(TObject *Sender) {
	Application->MessageBox
		(L"Sorting Algorithms\nAuthor: Rafal Olszewski\nVersion: 1.1\nhttps://github.com/T8kme/",
		L"About", MB_OK);
}

// ---------------------------------------------------------------------------
void __fastcall TForm2::ListBoxTimeDblClick(TObject *Sender) {
	try {
		String SelectedItemCaption =
			ListBoxTime->Items->Strings[ListBoxTime->ItemIndex];
		string GetListItem = UnicodeToString(SelectedItemCaption);
		const char* str = new char[GetListItem.length() + 1];
		str = GetListItem.c_str();
		OpenClipboard(this->WindowHandle);
		EmptyClipboard();
		HGLOBAL h = GlobalAlloc(GHND | GMEM_SHARE, GetListItem.length() + 1);
		strcpy((LPSTR)GlobalLock(h), str);
		GlobalUnlock(h);
		SetClipboardData(CF_TEXT, h);
		CloseClipboard();

		ShowMessage("Copied \"" + SelectedItemCaption + "\" to clipboard");
	}
	catch (...) {

	}
}

// ---------------------------------------------------------------------------
void __fastcall TForm2::bSortClick(TObject *Sender) {
	try {
		if (!EditUnsorted->Text.IsEmpty()) {
			EditSorted->Enabled = true;
		}

		string input = UnicodeToString(EditUnsorted->Text);

		vector<long>output;
		for (string::size_type p0 = 0, p1 = input.find(',');
		p1 != string::npos || p0 != string::npos;
		(p0 = (p1 == string::npos) ? p1 : ++p1), p1 = input.find(',', p0))
			output.push_back(strtol(input.c_str() + p0, NULL, 0));

		int size_of_array = output.size();
		int* array = new int[size_of_array];

		for (int i = 0; i < size_of_array; i++) {
			array[i] = output.at(i);
		}

		Table s_array(size_of_array, array);
		//

		if (RadioButton1->Checked) {
			StartCounter();
			s_array.Sort();
			elapsed_secs = GetCounter();
		}
		else if (RadioButton2->Checked) {
			StartCounter();
			s_array.BubbleSort();
			elapsed_secs = GetCounter();
		}
		else if (RadioButton3->Checked) {
			StartCounter();
			s_array.InsertionSort();
			elapsed_secs = GetCounter();
		}
		else if (RadioButton4->Checked) {
			StartCounter();
			s_array.MergeSort();
			elapsed_secs = GetCounter();
		}
		else if (RadioButton5->Checked) {
			StartCounter();
			s_array.CountingSort();
			elapsed_secs = GetCounter();
		}
		else if (RadioButton6->Checked) {
			StartCounter();

			elapsed_secs = GetCounter();
		}
		else if (RadioButton7->Checked) {
			StartCounter();
			s_array.RadixSort();
			elapsed_secs = GetCounter();
		}
		else if (RadioButton8->Checked) {
			StartCounter();
			s_array.SelectionSort();
			elapsed_secs = GetCounter();
		}
		else if (RadioButton9->Checked) {
			StartCounter();
			s_array.ShellSort();
			elapsed_secs = GetCounter();
		}
		else if (RadioButton10->Checked) {
			StartCounter();
			s_array.QuickSort();
			elapsed_secs = GetCounter();
		}
		else if (RadioButton11->Checked) {
			StartCounter();
			s_array.HeapSort();
			elapsed_secs = GetCounter();
		}
		else if (RadioButton12->Checked) {
			StartCounter();
			s_array.ExchangeSort();
			elapsed_secs = GetCounter();
		}

		//
		labelTime->Caption = FloatToStrF(elapsed_secs, ffFixed, 2, 3) +
			" \u00B5s";
		EditSorted->Text = s_array.TableToString();
	}
	catch (...) {
	}
}

// ---------------------------------------------------------------------------
void __fastcall TForm2::bSaveClick(TObject *Sender) {
	if (EditSorted->Text.IsEmpty()) {
		Application->MessageBox
			(L"Theres nothing to save.\nEnter numbers and click sort button to obtain data.",
			L"App Error", IDOK);
		return;
	}
	string sorted = UnicodeToString(EditSorted->Text);
	if (SaveDialog1->Execute()) {
		ofstream outfile(SaveDialog1->FileName.c_str(), ios::out);
		if (!outfile) {
			Application->MessageBox(L"There was a problem saving the file.",
				L"App Error", IDOK);
			return;
		}

		outfile << sorted;

		outfile.close();
	}
}

// ---------------------------------------------------------------------------
void __fastcall TForm2::bOpenClick(TObject *Sender) {
	string input;
	if (OpenDialog1->Execute()) {
		ifstream file;
		file.open(OpenDialog1->FileName.c_str(), ios::in);
		if (!file) {
			ShowMessage("There was a problem opening the file.");
			return;
		}
		while (!file.eof()) {
			file >> input;
		}
		file.close();
	}
	std::string::size_type i = 0;
	for (int p = input.find("\n"); p != (int) string::npos;
	p = input.find("\n"))
		input.erase(p, 1);
	Memo1->Text = input.c_str();
	UnicodeString str = input.c_str();
	EditUnsorted->Text = str;
}

// ---------------------------------------------------------------------------.")
void __fastcall TForm2::Open1Click(TObject *Sender) {
	bOpen->Click();
}
// ---------------------------------------------------------------------------

void __fastcall TForm2::Save1Click(TObject *Sender) {
	bSave->Click();
}
// ---------------------------------------------------------------------------
